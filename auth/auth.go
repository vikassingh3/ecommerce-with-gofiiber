package auth

import (
	"context"
	"fmt"
	"log"
	"os"
	"regexp"
	"time"

	"github.com/dgrijalva/jwt-go"
	"github.com/gofiber/fiber/v2"
	"github.com/vikas/config"
	"github.com/vikas/model"
	"go.mongodb.org/mongo-driver/bson"
	"golang.org/x/crypto/bcrypt"
)

//  create JWT secret key to verify the database using the token generated by the JTW

var jwtWare = "gosecretkey"

var u = model.User{
	Email:    "email",
	Password: "password",
}

// created JWT secret key to verify the database using the token generated by the JWT

func getHash(pwd []byte) string {
	hash, err := bcrypt.GenerateFromPassword(pwd, bcrypt.MinCost)
	if err != nil {
		log.Println(err)
	}
	return string(hash)
}

// craete function generateJWT to generate the JWT token for the auth

func GenerateJWT() (string, error) {
	token := jwt.New(jwt.SigningMethodHS256)
	tokenString, err := token.SignedString(jwtWare)
	if err != nil {
		log.Println("Error in JWT token generation")
		return "", err
	}
	return tokenString, nil
}

func SignUp(c *fiber.Ctx) error {
	user := new(model.User)
	err := c.BodyParser(user)
	if err != nil {
		return err
	}

	//-----------------------Password Encryption---------------------//

	user.Password = getHash([]byte(user.Password))

	collectionDB := config.MI.DB.Collection(os.Getenv("DATABASE_COLLECTION"))
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	if cancel == nil {
		return nil
	}
	//------------Email Validation Using regular expression----------//

	ValidateEmail := user.Email

	CheckEmail := regexp.MustCompile(`^[a-z0-9._\-]+@[a-z0-9\-]+\.[a-z]{2,4}$`)

	Check := (CheckEmail.MatchString(ValidateEmail))

	if Check == true {
		//-----------Checking if email exist or not in the database------//

		err1 := collectionDB.FindOne(ctx, bson.M{"email": user.Email}).Err()
		if err1 == nil {
			response := model.Response{
				Message: "email already exist",
			}
			return c.Status(fiber.StatusOK).JSON(fiber.Map{
				"success":  true,
				"response": response,
			})
		}

		//-----------Checking if username exist or not in the database------//
		err2 := collectionDB.FindOne(ctx, bson.M{"username": user.UserName}).Err()
		if err2 == nil {
			response := model.Response{
				Message: "Username already ",
			}
			return c.JSON(response)
		}
		//-----------Inserting the registered user in the database------//
		result, _ := collectionDB.InsertOne(ctx, user)

		if result != nil {
			fmt.Println("User Registered")
		}

		return c.JSON(fiber.Map{
			"message": true,
			"data":    "running",
		})
	}
	return c.JSON(fiber.Map{
		"message": false,
	})
}

//--------------------Created CreateToken function-------------------//
func CreateToken(userMail string) (string, error) {
	var err error
	claims := jwt.MapClaims{}
	claims["authorized"] = true

	//--------------------Token claims to useremail-------------------//
	claims["user_mail"] = userMail

	//--------------------Token Expiration time (Not Secure Method) -------------------//
	claims["exp"] = time.Now().Add(time.Minute * 5).Unix()

	//--------------------Validate token for signing in user-------------------//
	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)
	t, err := token.SignedString([]byte("gosecretkey"))
	if err != nil {
		return "", err
	}
	return t, nil
}

//--------------------Created Login function-------------------//
func Login(c *fiber.Ctx) error {

	user := new(model.User)
	var dbUser model.User

	err := c.BodyParser(&user)
	if err != nil {
		return err
	}

	collectionDB := config.MI.DB.Collection(os.Getenv("DATABASE_COLLECTION"))
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)

	if cancel == nil {
		return nil
	}
	//--------------------Checking if user login email exist in the database-------------------//
	err = collectionDB.FindOne(ctx, bson.M{"email": user.Email}).Decode(&dbUser)

	if err != nil {
		return c.JSON(fiber.Map{
			"message": "email is not valid",
		})
	}

	//-----------------------Checking the password entered is correct or not for the given login email---------------------//
	userPass := []byte(user.Password)
	dbPass := []byte(dbUser.Password)

	passErr := bcrypt.CompareHashAndPassword(dbPass, userPass)

	if passErr != nil {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"message": "Wrong Password",
		})
	}
	//-----------------------Genrating token for verified user login with the GenerateJWT function---------------------//
	tokenDB := config.MI.DB.Collection(os.Getenv("TOKEN_COLLECTION"))
	token1 := new(model.Token)
	c.BodyParser(&token1)
	validEmail := token1.Email
	CheckEmail := regexp.MustCompile(`^[a-z0-9._\-]+@[a-z0-9\-]+\.[a-z]{2,4}$`)
	Check := (CheckEmail.MatchString(validEmail))

	if Check == true {

		err1 := tokenDB.FindOne(ctx, bson.M{"email": token1.Email}).Err()
		if err1 == nil {
			response := model.Response{
				Message: "user alredy logged in",
			}
			return c.Status(fiber.StatusOK).JSON(fiber.Map{

				"response": response,
			})
		}

	}

	ValidToken, err := CreateToken(u.Email)

	if err != nil {
		c.Status(fiber.StatusInternalServerError)
		return c.JSON(fiber.Map{
			"message": "could not login",
		})
	} else {

		token := model.Token{
			user.Email,
			ValidToken,
		}
		tokenDB.InsertOne(c.Context(), token)
		return c.JSON(fiber.Map{
			"success": true,
		})

	}

}
func LogOut(c *fiber.Ctx) error {
	user := new(model.Token)
	c.BodyParser(&user)

	collectionDB := config.MI.DB.Collection(os.Getenv("TOKEN_COLLECTION"))
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)

	if cancel != nil {
		fmt.Println("not success")
	}

	err := collectionDB.FindOne(ctx, bson.M{"email": user.Email}).Err()

	if err != nil {
		fmt.Println("no data")
	}

	err = collectionDB.FindOneAndDelete(ctx, bson.M{"email": user.Email}).Err()

	if err != nil {
		log.Fatal("no any data in document")
	}

	return c.Status(fiber.StatusOK).JSON(fiber.Map{
		"message": "LogOut Successful",
	})

}
